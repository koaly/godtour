{
  "_from": "cookie-session@^2.0.0-beta.3",
  "_id": "cookie-session@2.0.0-beta.3",
  "_inBundle": false,
  "_integrity": "sha512-zyqm5tA0z9yMEB/xyP7lnRnqp8eLR2e0dap+9+rBwVigla9yPKn8XTL1jJymog8xjfrowqW2o5LUjixQChkqrw==",
  "_location": "/cookie-session",
  "_phantomChildren": {
    "ms": "2.0.0"
  },
  "_requested": {
    "escapedName": "cookie-session",
    "fetchSpec": "^2.0.0-beta.3",
    "name": "cookie-session",
    "raw": "cookie-session@^2.0.0-beta.3",
    "rawSpec": "^2.0.0-beta.3",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cookie-session/-/cookie-session-2.0.0-beta.3.tgz",
  "_shasum": "4e446bd9f85bd7e27d3e226f4e99af12011a4386",
  "_spec": "cookie-session@^2.0.0-beta.3",
  "_where": "D:\\Programming\\godtour",
  "bugs": {
    "url": "https://github.com/expressjs/cookie-session/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Jonathan Ong",
      "email": "me@jongleberry.com",
      "url": "http://jongleberry.com"
    }
  ],
  "dependencies": {
    "cookies": "0.7.1",
    "debug": "3.1.0",
    "on-headers": "~1.0.1",
    "safe-buffer": "5.1.1"
  },
  "deprecated": false,
  "description": "cookie session middleware",
  "devDependencies": {
    "connect": "3.6.5",
    "eslint": "3.19.0",
    "eslint-config-standard": "10.2.1",
    "eslint-plugin-import": "2.7.0",
    "eslint-plugin-markdown": "1.0.0-beta.6",
    "eslint-plugin-node": "5.2.0",
    "eslint-plugin-promise": "3.5.0",
    "eslint-plugin-standard": "3.0.1",
    "mocha": "3.5.3",
    "nyc": "10.3.2",
    "supertest": "1.2.0"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "files": [
    "HISTORY.md",
    "LICENSE",
    "README.md",
    "index.js"
  ],
  "homepage": "https://github.com/expressjs/cookie-session#readme",
  "keywords": [
    "connect",
    "express",
    "middleware",
    "session"
  ],
  "license": "MIT",
  "name": "cookie-session",
  "optionalDependencies": {},
  "readme": "# cookie-session\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nSimple cookie-based session middleware.\n\nA user session can be stored in two main ways with cookies: on the server or on\nthe client. This module stores the session data on the client within a cookie,\nwhile a module like [express-session](https://www.npmjs.com/package/express-session)\nstores only a session identifier on the client within a cookie and stores the\nsession data on the server, typically in a database.\n\nThe following points can help you choose which to use:\n\n  * `cookie-session` does not require any database / resources on the server side,\n    though the total session data cannot exceed the browser's max cookie size.\n  * `cookie-session` can simplify certain load-balanced scenarios.\n  * `cookie-session` can be used to store a \"light\" session and include an identifier\n    to look up a database-backed secondary store to reduce database lookups.\n\n## Install\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install cookie-session\n```\n\n## API\n\n```js\nvar cookieSession = require('cookie-session')\nvar express = require('express')\n\nvar app = express()\n\napp.use(cookieSession({\n  name: 'session',\n  keys: [/* secret keys */],\n\n  // Cookie Options\n  maxAge: 24 * 60 * 60 * 1000 // 24 hours\n}))\n```\n\n### cookieSession(options)\n\nCreate a new cookie session middleware with the provided options. This middleware\nwill attach the property `session` to `req`, which provides an object representing\nthe loaded session. This session is either a new session if no valid session was\nprovided in the request, or a loaded session from the request.\n\nThe middleware will automatically add a `Set-Cookie` header to the response if the\ncontents of `req.session` were altered. _Note_ that no `Set-Cookie` header will be\nin the response (and thus no session created for a specific user) unless there are\ncontents in the session, so be sure to add something to `req.session` as soon as\nyou have identifying information to store for the session.\n\n#### Options\n\nCookie session accepts these properties in the options object.\n\n##### name\n\nThe name of the cookie to set, defaults to `session`.\n\n##### keys\n\nThe list of keys to use to sign & verify cookie values. Set cookies are always\nsigned with `keys[0]`, while the other keys are valid for verification, allowing\nfor key rotation.\n\n##### secret\n\nA string which will be used as single key if `keys` is not provided.\n\n##### Cookie Options\n\nOther options are passed to `cookies.get()` and `cookies.set()` allowing you\nto control security, domain, path, and signing among other settings.\n\nThe options can also contain any of the following (for the full list, see\n[cookies module documentation](https://www.npmjs.org/package/cookies#readme):\n\n  - `maxAge`: a number representing the milliseconds from `Date.now()` for expiry\n  - `expires`: a `Date` object indicating the cookie's expiration date (expires at the end of session by default).\n  - `path`: a string indicating the path of the cookie (`/` by default).\n  - `domain`: a string indicating the domain of the cookie (no default).\n  - `sameSite`: a boolean or string indicating whether the cookie is a \"same site\" cookie (`false` by default). This can be set to `'strict'`, `'lax'`, or `true` (which maps to `'strict'`).\n  - `secure`: a boolean indicating whether the cookie is only to be sent over HTTPS (`false` by default for HTTP, `true` by default for HTTPS). If this is set to `true` and Node.js is not directly over a TLS connection, be sure to read how to [setup Express behind proxies](https://expressjs.com/en/guide/behind-proxies.html) or the cookie may not ever set correctly.\n  - `httpOnly`: a boolean indicating whether the cookie is only to be sent over HTTP(S), and not made available to client JavaScript (`true` by default).\n  - `signed`: a boolean indicating whether the cookie is to be signed (`true` by default). If this is true, another cookie of the same name with the `.sig` suffix appended will also be sent, with a 27-byte url-safe base64 SHA1 value representing the hash of _cookie-name_=_cookie-value_ against the first [Keygrip](https://github.com/expressjs/keygrip) key. This signature key is used to detect tampering the next time a cookie is received.\n  - `overwrite`: a boolean indicating whether to overwrite previously set cookies of the same name (`true` by default). If this is true, all cookies set during the same request with the same name (regardless of path or domain) are filtered out of the Set-Cookie header when setting this cookie.\n\n### req.session\n\nRepresents the session for the given request.\n\n#### .isChanged\n\nIs `true` if the session has been changed during the request.\n\n#### .isNew\n\nIs `true` if the session is new.\n\n#### .isPopulated\n\nDetermine if the session has been populated with data or is empty.\n\n### req.sessionOptions\n\nRepresents the session options for the current request. These options are a\nshallow clone of what was provided at middleware construction and can be\naltered to change cookie setting behavior on a per-request basis.\n\n### Destroying a session\n\nTo destroy a session simply set it to `null`:\n\n```\nreq.session = null\n```\n\n## Examples\n\n### Simple view counter example\n\n```js\nvar cookieSession = require('cookie-session')\nvar express = require('express')\n\nvar app = express()\n\napp.set('trust proxy', 1) // trust first proxy\n\napp.use(cookieSession({\n  name: 'session',\n  keys: ['key1', 'key2']\n}))\n\napp.get('/', function (req, res, next) {\n  // Update views\n  req.session.views = (req.session.views || 0) + 1\n\n  // Write response\n  res.end(req.session.views + ' views')\n})\n\napp.listen(3000)\n```\n\n### Per-user sticky max age\n\n```js\nvar cookieSession = require('cookie-session')\nvar express = require('express')\n\nvar app = express()\n\napp.set('trust proxy', 1) // trust first proxy\n\napp.use(cookieSession({\n  name: 'session',\n  keys: ['key1', 'key2']\n}))\n\n// This allows you to set req.session.maxAge to let certain sessions\n// have a different value than the default.\napp.use(function (req, res, next) {\n  req.sessionOptions.maxAge = req.session.maxAge || req.sessionOptions.maxAge\n  next()\n})\n\n// ... your logic here ...\n```\n\n### Extending the session expiration\n\nThis module does not send a `Set-Cookie` header if the contents of the session\nhave not changed. This means that to extend the expiration of a session in the\nuser's browser (in response to user activity, for example) some kind of\nmodification to the session needs be made.\n\n```js\nvar cookieSession = require('cookie-session')\nvar express = require('express')\n\nvar app = express()\n\napp.use(cookieSession({\n  name: 'session',\n  keys: ['key1', 'key2']\n}))\n\n// Update a value in the cookie so that the set-cookie will be sent.\n// Only changes every minute so that it's not sent with every request.\napp.use(function (req, res, next) {\n  req.session.nowInMinutes = Math.floor(Date.now() / 60e3)\n  next()\n})\n\n// ... your logic here ...\n```\n\n## Usage Limitations\n\n### Max Cookie Size\n\nBecause the entire session object is encoded and stored in a cookie, it is\npossible to exceed the maxium cookie size limits on different browsers. The\n[RFC6265 specification](https://tools.ietf.org/html/rfc6265#section-6.1)\nrecommends that a browser **SHOULD** allow\n\n> At least 4096 bytes per cookie (as measured by the sum of the length of\n> the cookie's name, value, and attributes)\n\nIn practice this limit differs slightly across browsers. See a list of\n[browser limits here](http://browsercookielimits.squawky.net/). As a rule\nof thumb **don't exceed 4093 bytes per domain**.\n\nIf your session object is large enough to exceed a browser limit when encoded,\nin most cases the browser will refuse to store the cookie. This will cause the\nfollowing requests from the browser to either a) not have any session\ninformation or b) use old session information that was small enough to not\nexceed the cookie limit.\n\nIf you find your session object is hitting these limits, it is best to\nconsider if  data in your session should be loaded from a database on the\nserver instead of transmitted to/from the browser with every request. Or\nmove to an [alternative session strategy](https://github.com/expressjs/session#compatible-session-stores)\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/cookie-session.svg\n[npm-url]: https://npmjs.org/package/cookie-session\n[travis-image]: https://img.shields.io/travis/expressjs/cookie-session/master.svg\n[travis-url]: https://travis-ci.org/expressjs/cookie-session\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/cookie-session.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/cookie-session?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/cookie-session.svg\n[downloads-url]: https://npmjs.org/package/cookie-session\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/expressjs/cookie-session.git"
  },
  "scripts": {
    "lint": "eslint --plugin markdown --ext js,md .",
    "test": "mocha --check-leaks --reporter spec --bail test/",
    "test-ci": "nyc --reporter=text npm test",
    "test-cov": "nyc --reporter=html --reporter=text npm test"
  },
  "version": "2.0.0-beta.3"
}
