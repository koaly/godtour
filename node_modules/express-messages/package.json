{
  "_from": "express-messages",
  "_id": "express-messages@1.0.1",
  "_inBundle": false,
  "_integrity": "sha1-mYGoWl0rEYx5/DP1K0GDT/7paFo=",
  "_location": "/express-messages",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "express-messages",
    "fetchSpec": "latest",
    "name": "express-messages",
    "raw": "express-messages",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-messages/-/express-messages-1.0.1.tgz",
  "_shasum": "9981a85a5d2b118c79fc33f52b41834ffee9685a",
  "_spec": "express-messages",
  "_where": "D:\\Programming\\godtour",
  "author": {
    "email": "tj@vision-media.ca",
    "name": "TJ Holowaychuk"
  },
  "bugs": {
    "url": "https://github.com/expressjs/express-messages/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Express flash notification message rendering",
  "devDependencies": {
    "connect-flash": "^0.1.1",
    "ejs": "^2.3.1",
    "express": "^4.13.0",
    "express-session": "^1.11.3",
    "supertest": "^1.0.1",
    "tap-spec": "^4.0.2",
    "tape": "^4.0.0"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "homepage": "https://github.com/expressjs/express-messages#readme",
  "keywords": [
    "express"
  ],
  "main": "index.js",
  "name": "express-messages",
  "optionalDependencies": {},
  "readme": "# Express Messages\n\nThe _express-messages_ module provides flash notification rendering.\n\n## Installation\n\n    $ npm install express-messages\n\n## Usage\n\n### Express 2.x\n\nTo use simply assign it to a dynamic helper:\n\n    app.dynamicHelpers({ messages: require('express-messages') });\n\n### Express 3+\n\nInstall [connect-flash](https://github.com/jaredhanson/connect-flash) and add them as middleware:\n\n```\napp.use(require('connect-flash')());\napp.use(function (req, res, next) {\n  res.locals.messages = require('express-messages')(req, res);\n  next();\n});\n```\n\n### Adding Messages\n\nOn the server:\n\n    req.flash(\"info\", \"Email queued\");\n    req.flash(\"info\", \"Email sent\");\n    req.flash(\"error\", \"Email delivery failed\");\n\nFor further information see [connect-flash](https://github.com/jaredhanson/connect-flash).\n\n### Rendering Messages\n\nCall the `messages()` function as specified by your rendering engine:\n\n[EJS](https://github.com/visionmedia/ejs):\n\n    <%- messages() %>\n\n[Jade](http://jade-lang.com/):\n\n    != messages()\n\nWhich will output the HTML:\n\n    <div id=\"messages\">\n      <ul class=\"info\">\n        <li>Email queued</li>\n        <li>Email sent</li>\n      </ul>\n      <ul class=\"error\">\n        <li>Email delivery failed</li>\n      </ul>\n    </div>\n\n## Using a custom template\n\nAlternatively you can specify a custom template (a file in the views directory of your [Express](http://expressjs.com) app).\n\n### Add a message template\n\nFor example, lets use the below custom message template named `my_message_template`.\n\n[EJS](https://github.com/visionmedia/ejs) (`my_message_template.ejs`):\n\n    <div id=\"messages\">\n    <% Object.keys(messages).forEach(function (type) { %>\n      <ul class=\"<%= type %>\">\n      <% messages[type].forEach(function (message) { %>\n        <li><%= message %></li>\n      <% }) %>\n      </ul>\n    <% }) %>\n    </div>\n\n[Jade](http://jade-lang.com/) (`my_message_template.jade`):\n\n    .messages\n      each type in Object.keys(messages)\n        ul(class=\"#{type}\")\n          each message in messages[type]\n            li= message\n\n### Call the message template\n\nNext, pass the template name, `my_message_template`, as a parameter to the `messages()` function.\n\n[EJS](https://github.com/visionmedia/ejs):\n\n    <%- messages('my_message_template', locals) %>\n\n[Jade](http://jade-lang.com/):\n\n    != messages('my_message_template', locals)\n\nThe message template will receive an object called `messages` of the form:\n\n    {\n      \"info\" : [\n        \"Email queued\",\n        \"Email sent\"\n      ],\n      \"error\": [\n        \"Email delivery failed\"\n      ]\n    }\n\n## Running Tests\n\n    $ npm test\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/expressjs/express-messages.git"
  },
  "scripts": {
    "test": "tape test/messages.js | node_modules/.bin/tap-spec"
  },
  "version": "1.0.1"
}
