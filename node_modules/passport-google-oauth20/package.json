{
  "_from": "passport-google-oauth20@^1.0.0",
  "_id": "passport-google-oauth20@1.0.0",
  "_inBundle": false,
  "_integrity": "sha1-O5YOih1w0dvnlGFcgnxoxAOSpdA=",
  "_location": "/passport-google-oauth20",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "passport-google-oauth20",
    "fetchSpec": "^1.0.0",
    "name": "passport-google-oauth20",
    "raw": "passport-google-oauth20@^1.0.0",
    "rawSpec": "^1.0.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/passport-google-oauth20/-/passport-google-oauth20-1.0.0.tgz",
  "_shasum": "3b960e8a1d70d1dbe794615c827c68c40392a5d0",
  "_spec": "passport-google-oauth20@^1.0.0",
  "_where": "D:\\Programming\\godtour",
  "author": {
    "email": "jaredhanson@gmail.com",
    "name": "Jared Hanson",
    "url": "http://www.jaredhanson.net/"
  },
  "bugs": {
    "url": "http://github.com/jaredhanson/passport-google-oauth2/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "passport-oauth2": "1.x.x"
  },
  "deprecated": false,
  "description": "Google (OAuth 2.0) authentication strategy for Passport.",
  "devDependencies": {
    "chai": "2.x.x",
    "chai-passport-strategy": "1.x.x",
    "make-node": "0.3.x",
    "mocha": "1.x.x"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "homepage": "https://github.com/jaredhanson/passport-google-oauth2#readme",
  "keywords": [
    "auth",
    "authentication",
    "authn",
    "google",
    "identity",
    "passport"
  ],
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "name": "passport-google-oauth20",
  "optionalDependencies": {},
  "readme": "# passport-google-oauth20\n\n[![Build](https://img.shields.io/travis/jaredhanson/passport-google-oauth2.svg)](https://travis-ci.org/jaredhanson/passport-google-oauth2)\n[![Coverage](https://img.shields.io/coveralls/jaredhanson/passport-google-oauth2.svg)](https://coveralls.io/r/jaredhanson/passport-google-oauth2)\n[![Quality](https://img.shields.io/codeclimate/github/jaredhanson/passport-google-oauth2.svg?label=quality)](https://codeclimate.com/github/jaredhanson/passport-google-oauth2)\n[![Dependencies](https://img.shields.io/david/jaredhanson/passport-google-oauth2.svg)](https://david-dm.org/jaredhanson/passport-google-oauth2)\n\n\n[Passport](http://passportjs.org/) strategy for authenticating with [Google](http://www.google.com/)\nusing the OAuth 2.0 API.\n\nThis module lets you authenticate using Google in your Node.js applications.\nBy plugging into Passport, Google authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-google-oauth20\n\n## Usage\n\n#### Create an Application\n\nBefore using `passport-google-oauth20`, you must register an application with\nGoogle.  If you have not already done so, a new project can be created in the\n[Google Developers Console](https://console.developers.google.com/).\nYour application will be issued a client ID and client secret, which need to be\nprovided to the strategy.  You will also need to configure a redirect URI which\nmatches the route in your application.\n\n#### Configure Strategy\n\nThe Google authentication strategy authenticates users using a Google account\nand OAuth 2.0 tokens.  The client ID and secret obtained when creating an\napplication are supplied as options when creating the strategy.  The strategy\nalso requires a `verify` callback, which receives the access token and optional\nrefresh token, as well as `profile` which contains the authenticated user's\nGoogle profile.  The `verify` callback must call `cb` providing a user to\ncomplete authentication.\n\n    var GoogleStrategy = require('passport-google-oauth20').Strategy;\n\n    passport.use(new GoogleStrategy({\n        clientID: GOOGLE_CLIENT_ID,\n        clientSecret: GOOGLE_CLIENT_SECRET,\n        callbackURL: \"http://www.example.com/auth/google/callback\"\n      },\n      function(accessToken, refreshToken, profile, cb) {\n        User.findOrCreate({ googleId: profile.id }, function (err, user) {\n          return cb(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'google'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/google',\n      passport.authenticate('google', { scope: ['profile'] }));\n\n    app.get('/auth/google/callback', \n      passport.authenticate('google', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n## Examples\n\nDevelopers using the popular [Express](http://expressjs.com/) web framework can\nrefer to an [example](https://github.com/passport/express-4.x-facebook-example)\nas a starting point for their own web applications.  The example shows how to\nauthenticate users using Facebook.  However, because both Facebook and Google\nuse OAuth 2.0, the code is similar.  Simply replace references to Facebook with\ncorresponding references to Google.\n\n## Contributing\n\n#### Tests\n\nThe test suite is located in the `test/` directory.  All new features are\nexpected to have corresponding test cases.  Ensure that the complete test suite\npasses by executing:\n\n```bash\n$ make test\n```\n\n#### Coverage\n\nThe test suite covers 100% of the code base.  All new feature development is\nexpected to maintain that level.  Coverage reports can be viewed by executing:\n\n```bash\n$ make test-cov\n$ make view-cov\n```\n\n## Support\n\n#### Funding\n\nThis software is provided to you as open source, free of charge.  The time and\neffort to develop and maintain this project is dedicated by [@jaredhanson](https://github.com/jaredhanson).\nIf you (or your employer) benefit from this project, please consider a financial\ncontribution.  Your contribution helps continue the efforts that produce this\nand other open source software.\n\nFunds are accepted via [PayPal](https://paypal.me/jaredhanson), [Venmo](https://venmo.com/jaredhanson),\nand [other](http://jaredhanson.net/pay) methods.  Any amount is appreciated.\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2012-2016 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/jaredhanson/passport-google-oauth2.git"
  },
  "scripts": {
    "test": "mocha --require test/bootstrap/node test/*.test.js test/**/*.test.js"
  },
  "version": "1.0.0"
}
